/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.35).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse201;
import io.swagger.model.OrdersBody;
import io.swagger.model.OrdersBody1;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-10-28T23:49:44.684Z[GMT]")
@Validated
public interface OrdersApi {

    @Operation(summary = "Delete Order", description = "Delete order  for Eawyshop ", security = {
        @SecurityRequirement(name = "ApiKeyAuth"),
@SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "BearerAuth"),
@SecurityRequirement(name = "oAuth2AuthCode", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Order detail deleted successfully"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. Please contact support@eazyshop.com ") })
    @RequestMapping(value = "/orders",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deletedOrderDetails(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "orderId", required = true) Integer orderId);


    @Operation(summary = "Get Order", description = "Get order  for Eawyshop ", security = {
        @SecurityRequirement(name = "ApiKeyAuth"),
@SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "BearerAuth"),
@SecurityRequirement(name = "oAuth2AuthCode", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Order detail  successfully loading", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. Please contact support@eazyshop.com ") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> getOrderDetails(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "orderId", required = true) Integer orderId);


    @Operation(summary = "Get Order", description = "Get order  for Eawyshop ", security = {
        @SecurityRequirement(name = "ApiKeyAuth"),
@SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "BearerAuth"),
@SecurityRequirement(name = "oAuth2AuthCode", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Order detail  successfully loading", content = @Content(mediaType = "application/json", schema = @Schema(implementation = OrdersBody.class))),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. Please contact support@eazyshop.com ") })
    @RequestMapping(value = "/orders/{orderId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<OrdersBody> getOrderDetailsUsingPathParam(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("orderId") Integer orderId);


    @Operation(summary = "Create Order", description = "Post order details to Eawyshop for processing  and shipping ", security = {
        @SecurityRequirement(name = "ApiKeyAuth"),
@SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "BearerAuth"),
@SecurityRequirement(name = "oAuth2AuthCode", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Order created successfully", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse201.class))),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. Please contact support@eazyshop.com ") })
    @RequestMapping(value = "/orders",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> savedOrderDetails(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrdersBody1 body);


    @Operation(summary = "Update Order", description = "Update order details to Eawyshop for processing  and shipping ", security = {
        @SecurityRequirement(name = "ApiKeyAuth"),
@SecurityRequirement(name = "BasicAuth"),
@SecurityRequirement(name = "BearerAuth"),
@SecurityRequirement(name = "oAuth2AuthCode", scopes = {
            "read",
"write",
"admin"        })    }, tags={ "Orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Order detail upated successfully"),
        
        @ApiResponse(responseCode = "500", description = "An error occured while processing the request. Please contact support@eazyshop.com ") })
    @RequestMapping(value = "/orders",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatedOrderDetails(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody OrdersBody body);

}

